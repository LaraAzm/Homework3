[
  {
    "objectID": "Homework3_06-01-24.html",
    "href": "Homework3_06-01-24.html",
    "title": "Tidyverse functions & manipulations",
    "section": "",
    "text": "library(conflicted)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\nlibrary(readr)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(DBI)\nconflicts_prefer(dplyr::filter)\n\n[conflicted] Will prefer dplyr::filter over any other package."
  },
  {
    "objectID": "Homework3_06-01-24.html#task-1-conceptual-questions",
    "href": "Homework3_06-01-24.html#task-1-conceptual-questions",
    "title": "Tidyverse functions & manipulations",
    "section": "Task 1: Conceptual Questions",
    "text": "Task 1: Conceptual Questions\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n.myfolder/MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects allow for all the work being done to be in a nice, self-contained folder with all of the scripts, figures and history needed.\n\n\nWhat is git and what is github?\n\n\nGit is a popular version control system that tracks changes made overtime and records them in a repository; github is a cloud platform that hosts those repositories.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibbles only print the first ten rows of the data and strict subsetting. They also do not rearrange names, ie: \"list name\" to \"list.name\" like data frames do.\n\n\nRewrite the following nested function call using base R’s chaining operator:\n\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\n#subset with petal length less that 1.55, species is setosa and dropping the Sepal length and width \niris_subset &lt;- subset(iris, Petal.Length &lt; 1.55, 5 == \"setosa\", select = -c(1, 2))\niris_subset\n\n   Petal.Length Petal.Width Species\n1           1.4         0.2  setosa\n2           1.4         0.2  setosa\n3           1.3         0.2  setosa\n4           1.5         0.2  setosa\n5           1.4         0.2  setosa\n7           1.4         0.3  setosa\n8           1.5         0.2  setosa\n9           1.4         0.2  setosa\n10          1.5         0.1  setosa\n11          1.5         0.2  setosa\n13          1.4         0.1  setosa\n14          1.1         0.1  setosa\n15          1.2         0.2  setosa\n16          1.5         0.4  setosa\n17          1.3         0.4  setosa\n18          1.4         0.3  setosa\n20          1.5         0.3  setosa\n22          1.5         0.4  setosa\n23          1.0         0.2  setosa\n28          1.5         0.2  setosa\n29          1.4         0.2  setosa\n32          1.5         0.4  setosa\n33          1.5         0.1  setosa\n34          1.4         0.2  setosa\n35          1.5         0.2  setosa\n36          1.2         0.2  setosa\n37          1.3         0.2  setosa\n38          1.4         0.1  setosa\n39          1.3         0.2  setosa\n40          1.5         0.2  setosa\n41          1.3         0.3  setosa\n42          1.3         0.3  setosa\n43          1.3         0.2  setosa\n46          1.4         0.3  setosa\n48          1.4         0.2  setosa\n49          1.5         0.2  setosa\n50          1.4         0.2  setosa\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format has data that does repeat in the first column vs wide format does not. Wide format is the best for data analysis."
  },
  {
    "objectID": "Homework3_06-01-24.html#task-2-reading-delimited-data",
    "href": "Homework3_06-01-24.html#task-2-reading-delimited-data",
    "title": "Tidyverse functions & manipulations",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass Data\n\nRead in the data, adding column names, printing out the tibble\n\n\n#read in the data (The column names are set to false because I used a local download of the dataset)\nglass_data &lt;- read_csv(\"./data/glass.data.csv\", col_names = FALSE, show_col_types = FALSE)\n\n#rename the columns (I redid this one after looking up how to rename quickly)\noldnames = c(\"X1\", \"X2\", \"X3\", \"X4\", \"X5\", \"X6\", \"X7\", \"X8\", \"X9\", \"X10\", \"X11\")\nnewnames = c(\"Id.number\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\")\nglass_data &lt;- glass_data %&gt;% rename_with(~ newnames[which(oldnames == .x)])\n\n#print the tibble \nglass_data\n\n# A tibble: 214 × 11\n   Id.number    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1         1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2         2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3         3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4         4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5         5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6         6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7         7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8         8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9         9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10        10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nStarting a chain that overwrites Type_of_glass using mutate(). Continuing and keeping only observations where Fe &lt; 0.2 and Type_of_glass is “tableware” or “headlamp”.\n\n\n#starting a new chain\nglass_data %&gt;%\n  #overwrite the Type_of_glass variable using recode\n  mutate(\n    Type_of_glass = recode(Type_of_glass,\n                           '1' = 'building_windows_float_processed',\n                           '2' = 'building_windows_non_float_processed',\n                           '3' = 'vehicle_windows_float_processed',\n                           '4' = 'vehicle_windows_non_float_processed',\n                           '5' = 'containers',\n                           '6' = 'tableware',\n                           '7' = 'headlamps')) %&gt;% \n  #using filter to drop certain elements\n  filter(Type_of_glass %in% c(\"tableware\", \"headlamps\") & Fe &lt; 0.2)\n\n# A tibble: 38 × 11\n   Id.number    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1       177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2       178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3       179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4       180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5       181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6       182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7       183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8       184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9       185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10       186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast Data\n\nRead in the data, adding column names, printing out the tibble\n\n\n#read in the data with no column names\nyeast_data &lt;- read_table(\"./data/yeast.data.csv\", col_names = FALSE)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  X1 = col_character(),\n  X2 = col_double(),\n  X3 = col_double(),\n  X4 = col_double(),\n  X5 = col_double(),\n  X6 = col_double(),\n  X7 = col_double(),\n  X8 = col_double(),\n  X9 = col_double(),\n  X10 = col_character()\n)\n\n#printing the tibble\nyeast_data\n\n# A tibble: 1,484 × 10\n   X1            X2    X3    X4    X5    X6    X7    X8    X9 X10  \n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStarting a chain that removes seq_name and nuc columns. Continuing to add columns corresponding to mean and median of numeric variables at each class grouping.\n\n\n#create a new object to store edits\nyeast_data |&gt; \n  #renaming columns with the rename function \n  rename(\n    seq_name = X1, \n    mcg = X2, \n    gvh = X3, \n    alm = X4, \n    mit = X5, \n    erl = X6, \n    pox = X7, \n    vac = X8, \n    nuc = X9,\n    class =X10\n  ) |&gt;\n  #dropping Sequence.Name column\n  select(class, !c(seq_name, nuc)) |&gt;\n  #sorting to pull class to the first column\n  select(class, everything()) |&gt;\n  #grouping by class variable\n  group_by(class) |&gt;\n  #creating new columns to calculate means of num columns \n  mutate(across(where(is.numeric), list(mean = mean, median = median))) |&gt;\n  #reducing the number of \n  mutate(across(where(is.numeric), ~ num(., digits = 2))) |&gt;\n  #printing all the columns\n  print(width=Inf)\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n   class       mcg       gvh       alm       mit       erl       pox       vac\n   &lt;chr&gt; &lt;num:.2!&gt; &lt;num:.2!&gt; &lt;num:.2!&gt; &lt;num:.2!&gt; &lt;num:.2!&gt; &lt;num:.2!&gt; &lt;num:.2!&gt;\n 1 MIT        0.58      0.61      0.47      0.13      0.50      0.00      0.48\n 2 MIT        0.43      0.67      0.48      0.27      0.50      0.00      0.53\n 3 MIT        0.64      0.62      0.49      0.15      0.50      0.00      0.53\n 4 NUC        0.58      0.44      0.57      0.13      0.50      0.00      0.54\n 5 MIT        0.42      0.44      0.48      0.54      0.50      0.00      0.48\n 6 CYT        0.51      0.40      0.56      0.17      0.50      0.50      0.49\n 7 MIT        0.50      0.54      0.48      0.65      0.50      0.00      0.53\n 8 NUC        0.48      0.45      0.59      0.20      0.50      0.00      0.58\n 9 MIT        0.55      0.50      0.66      0.36      0.50      0.00      0.49\n10 CYT        0.40      0.39      0.60      0.15      0.50      0.00      0.58\n    mcg_mean mcg_median  gvh_mean gvh_median  alm_mean alm_median  mit_mean\n   &lt;num:.2!&gt;  &lt;num:.2!&gt; &lt;num:.2!&gt;  &lt;num:.2!&gt; &lt;num:.2!&gt;  &lt;num:.2!&gt; &lt;num:.2!&gt;\n 1      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n 2      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n 3      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n 4      0.45       0.45      0.46       0.46      0.53       0.53      0.23\n 5      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n 6      0.48       0.48      0.47       0.46      0.54       0.53      0.23\n 7      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n 8      0.45       0.45      0.46       0.46      0.53       0.53      0.23\n 9      0.52       0.51      0.53       0.53      0.52       0.52      0.40\n10      0.48       0.48      0.47       0.46      0.54       0.53      0.23\n   mit_median  erl_mean erl_median  pox_mean pox_median  vac_mean vac_median\n    &lt;num:.2!&gt; &lt;num:.2!&gt;  &lt;num:.2!&gt; &lt;num:.2!&gt;  &lt;num:.2!&gt; &lt;num:.2!&gt;  &lt;num:.2!&gt;\n 1       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n 2       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n 3       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n 4       0.20      0.50       0.50      0.00       0.00      0.49       0.50\n 5       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n 6       0.19      0.50       0.50      0.00       0.00      0.50       0.51\n 7       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n 8       0.20      0.50       0.50      0.00       0.00      0.49       0.50\n 9       0.41      0.50       0.50      0.01       0.00      0.50       0.50\n10       0.19      0.50       0.50      0.00       0.00      0.50       0.51\n# ℹ 1,474 more rows"
  },
  {
    "objectID": "Homework3_06-01-24.html#task-2-combining-excel-and-delimited-data",
    "href": "Homework3_06-01-24.html#task-2-combining-excel-and-delimited-data",
    "title": "Tidyverse functions & manipulations",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\n\nImporting the data from the first sheet using readxl and printing out the tibble.\n\n\n#reading in an excel sheet with non-standard names\nwhite_wine_data &lt;- read_excel(\"./data/white-wine.xlsx\")\n\n#printing the tibblle\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nReading in names from second sheet and overwriting the column names of White_wine_data.\n\n\n#reading in the second sheet\nwhite_wine_names &lt;- read_excel(\"./data/white-wine.xlsx\", \n                               sheet = excel_sheets(\"./data/white-wine.xlsx\")[2]\n                               )\n\n#renaming the columns using the second sheet\ncolnames(white_wine_data) &lt;- white_wine_names$Variables\n\n\nAdding a column with white whine type\n\n\n#create a new object to store edits\nwhite_wine_edit &lt;- white_wine_data |&gt;\n  #adding a column with white as wine type\n  mutate(wine_type = \"white\") |&gt;\n  #printing the edits \n  print()\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nRepeating read in with red wine data, renaming columns and adding wine type\n\n\n#reading in an excel sheet with non-standard names\nred_wine_data &lt;- read_delim(\"./data/red-wine.csv\", delim = \";\", show_col_types = FALSE)\n\n#printing the tibblle\nred_wine_data\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#create a new object to store edits\nred_wine_edit &lt;- red_wine_data |&gt; \n  #cleaning column names\n  clean_names() |&gt;\n  #renaming p_h to pH\n  rename(\"pH\" = p_h) |&gt;\n  #adding a column with red as wine type\n  mutate(\n    wine_type = \"red\"\n    ) |&gt;\n  #printing the edits \n  print()\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nCombining data sets\n\n\n#creating an object and binding both datasets together\nwine_data &lt;- bind_rows(white_wine_edit, red_wine_edit)\n\n#printing the tibble\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nStarting a chain on combined data object to filter using quality &gt; 6.5 with alcohol alcohol &lt; 132. Continuing to sort using descending quality. Continuing to select only variables with “acid”, alcohol, type, and quality. Continuing to add the mean and standard deviation of alcohol based on quality.\n\n\nwine_data |&gt;\n  #filtering based on quality and alcohol values \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  #arrangeing in descending order by quality \n  arrange(desc(quality)) |&gt;\n  #printing the tibble\n  print() |&gt;\n  #selecting only the columns that have \"acid\" in name, alchohol, quality and wine type\n  select(contains(\"acid\"), alcohol, quality, wine_type) |&gt;\n  #printing\n  print() |&gt;\n  #grouping by quality for the summary step\n  group_by(quality) |&gt;\n  #summarizing the tibble by quality grouping\n  mutate(across(alcohol, list(mean = mean, sd = sd)))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol quality wine_type\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1            91             0.27        0.45     104       9 white    \n 2            66             0.36        0.29     124       9 white    \n 3            74             0.24        0.36     125       9 white    \n 4            69             0.36        0.34     127       9 white    \n 5            71             0.26        0.49     129       9 white    \n 6            62             0.66        0.48     128       8 white    \n 7            62             0.66        0.48     128       8 white    \n 8            68             0.26        0.42     105       8 white    \n 9            67             0.23        0.31     107       8 white    \n10            67             0.23        0.31     107       8 white    \n# ℹ 1,196 more rows\n\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol quality wine_type\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1            91             0.27        0.45     104       9 white    \n 2            66             0.36        0.29     124       9 white    \n 3            74             0.24        0.36     125       9 white    \n 4            69             0.36        0.34     127       9 white    \n 5            71             0.26        0.49     129       9 white    \n 6            62             0.66        0.48     128       8 white    \n 7            62             0.66        0.48     128       8 white    \n 8            68             0.26        0.42     105       8 white    \n 9            67             0.23        0.31     107       8 white    \n10            67             0.23        0.31     107       8 white    \n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3_06-01-24.html#task-3-database-practice",
    "href": "Homework3_06-01-24.html#task-3-database-practice",
    "title": "Tidyverse functions & manipulations",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\n\nCreating the connection to the database\n\nConnecting to the database and listing all the tables.\n\n\n#connecting the database\ncon &lt;- dbConnect(RSQLite::SQLite(), \"./data/lahman.db\")\n\n#printing the tables within the connected database\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\nUsing tbl() to return “Teams” table for year 2015.\n\n\n#using dplyr to print the Teams table \ntbl(con, \"Teams\") |&gt;\n  #only showing year 2015\n  filter(yearID == 2015) |&gt;\n  #printing the query to add to the SQL code\n  show_query() |&gt;\n  #printing the table\n  print()\n\n&lt;SQL&gt;\nSELECT `Teams`.*\nFROM `Teams`\nWHERE (`yearID` = 2015.0)\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\lazzi\\OneDrive\\NCSU\\ST558\\Homework 3\\Homework3\\data\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nRepeating with sql() within tbl().\n\n\n#using the code from `show_query` to print using SQL code\ntbl(con, sql(\n\"SELECT *\nFROM `Teams`\nWHERE (`yearID` &gt;= 2015.0)\")\n)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\lazzi\\OneDrive\\NCSU\\ST558\\Homework 3\\Homework3\\data\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nReturn all of the players in “HallOfFame”, year voted in, and category.\n\n\n#creating an object for later (needed to add the `as_tibble` part due to error)\nhalloffame &lt;- as_tibble(tbl(con, \"HallOfFame\")) |&gt;\n  #filtering by induction and player category\n  filter(inducted == \"Y\" & category == \"Player\") |&gt;\n  #arranging alphabetically\n  arrange(playerID) |&gt;\n  #selecting only the needed columns\n  select(playerID, yearID, category) |&gt;\n  #printing\n  print()\n\n# A tibble: 270 × 3\n   playerID  yearID category\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 aaronha01   1982 Player  \n 2 alexape01   1938 Player  \n 3 alomaro01   2011 Player  \n 4 ansonca01   1939 Player  \n 5 aparilu01   1984 Player  \n 6 applilu01   1964 Player  \n 7 ashburi01   1995 Player  \n 8 averiea01   1975 Player  \n 9 bagweje01   2017 Player  \n10 baineha01   2019 Player  \n# ℹ 260 more rows\n\n#doing the same for the object here\npeople &lt;- as_tibble(tbl(con, \"People\")) |&gt;\n  #selecting only the desired columns\n  select(playerID, nameFirst, nameLast)|&gt;\n  #printing\n  print()\n\n# A tibble: 20,676 × 3\n   playerID  nameFirst nameLast   \n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      \n 1 aardsda01 David     Aardsma    \n 2 aaronha01 Hank      Aaron      \n 3 aaronto01 Tommie    Aaron      \n 4 aasedo01  Don       Aase       \n 5 abadan01  Andy      Abad       \n 6 abadfe01  Fernando  Abad       \n 7 abadijo01 John      Abadie     \n 8 abbated01 Ed        Abbaticchio\n 9 abbeybe01 Bert      Abbey      \n10 abbeych01 Charlie   Abbey      \n# ℹ 20,666 more rows\n\n\n\nCombining with the People table in order to have the nameFirst and nameLast added to halloffame.\n\n\n#combining the two tibbles by playerID's\nhalloffame_people &lt;- full_join(halloffame, people, by = 'playerID') |&gt;\n  #filtering based on category\n  filter(!is.na(category)) |&gt;\n  #readjusting to make the final tibble look nice\n  select(nameFirst, nameLast, everything()) |&gt;\n  #printing\n  print()\n\n# A tibble: 270 × 5\n   nameFirst nameLast  playerID  yearID category\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 Hank      Aaron     aaronha01   1982 Player  \n 2 Pete      Alexander alexape01   1938 Player  \n 3 Roberto   Alomar    alomaro01   2011 Player  \n 4 Cap       Anson     ansonca01   1939 Player  \n 5 Luis      Aparicio  aparilu01   1984 Player  \n 6 Luke      Appling   applilu01   1964 Player  \n 7 Richie    Ashburn   ashburi01   1995 Player  \n 8 Earl      Averill   averiea01   1975 Player  \n 9 Jeff      Bagwell   bagweje01   2017 Player  \n10 Harold    Baines    baineha01   2019 Player  \n# ℹ 260 more rows\n\n\n\nReturning only the playerID , G, W, and L columns from the “Managers”. Determining the overall win/loss records. Creating a new variable with win/loss percentage. Sorting the resulting data by descending win/loss percentage.\n\n\n#making a new object to handle the managers values \nmanagers &lt;- as_tibble(tbl(con, \"Managers\")) |&gt;\n  #selecting the desired columns\n  select(playerID, G, W, L) |&gt;\n  #grouping by playerID\n  group_by(playerID) |&gt;\n  #summarizing the values\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  #adding a new column with win percentage\n  mutate(Win_Percentage = (Total_W/G_managed)*100) |&gt;\n  #reducing the number of digits\n  mutate(across(Win_Percentage, ~ num(., digits = 2))) |&gt;\n  #arranging by descending win percentages \n  arrange(desc(Win_Percentage)) |&gt;\n  #printing\n  print()\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Win_Percentage\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;      &lt;num:.2!&gt;\n 1 bensove01         1       1       0         100.00\n 2 burwebi01         1       1       0         100.00\n 3 cohenan01         1       1       0         100.00\n 4 ebeldi99          3       3       0         100.00\n 5 falkbi01          1       1       0         100.00\n 6 hardeme01         3       3       0         100.00\n 7 simmote01         1       1       0         100.00\n 8 steinte01         2       2       0         100.00\n 9 sukefcl01         2       2       0         100.00\n10 tamarjo01         1       1       0         100.00\n# ℹ 739 more rows\n\n\n\nWith results from the previous and adding information for only the people that managed a team and were inducted into the hall of fame.\n\n\n#creating an object to handle the managers values\nhalloffame_managers &lt;- as_tibble(tbl(con, \"HallOfFame\")) |&gt;\n  #filtering by induction and manager category\n  filter(inducted == \"Y\" & category == \"Manager\") |&gt;\n  #selecting only the needed columns\n  select(playerID, yearID, category) |&gt;\n  #printing\n  print()\n\n# A tibble: 23 × 3\n   playerID  yearID category\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 mackco01    1937 Manager \n 2 mcgrajo01   1937 Manager \n 3 robinwi01   1945 Manager \n 4 mccarjo99   1957 Manager \n 5 mckecbi01   1962 Manager \n 6 huggimi01   1964 Manager \n 7 stengca01   1966 Manager \n 8 harribu01   1975 Manager \n 9 lopezal01   1977 Manager \n10 fosteru99   1981 Manager \n# ℹ 13 more rows\n\n#combining the three objects by playerID's\nleft_join(halloffame_managers, people, by = 'playerID') |&gt;\n  left_join(managers, by = 'playerID') |&gt;\n  #readjusting to make the final look nice\n  select(nameFirst, nameLast, everything()) |&gt;\n  #sorting by win percentage again\n  arrange(desc(Win_Percentage)) |&gt;\n  #printing\n  print()\n\n# A tibble: 23 × 9\n   nameFirst nameLast   playerID  yearID category G_managed Total_W Total_L\n   &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 Joe       McCarthy   mccarjo99   1957 Manager       3487    2125    1333\n 2 Billy     Southworth southbi01   2008 Manager       1770    1044     704\n 3 Frank     Selee      seleefr99   1999 Manager       2180    1284     862\n 4 Earl      Weaver     weaveea99   1996 Manager       2541    1480    1060\n 5 Al        Lopez      lopezal01   1977 Manager       2425    1410    1004\n 6 John      McGraw     mcgrajo01   1937 Manager       4769    2763    1948\n 7 Walter    Alston     alstowa01   1983 Manager       3658    2040    1613\n 8 Bobby     Cox        coxbo01     2014 Manager       4499    2497    1999\n 9 Miller    Huggins    huggimi01   1964 Manager       2570    1413    1134\n10 Sparky    Anderson   andersp01   2000 Manager       4030    2194    1834\n# ℹ 13 more rows\n# ℹ 1 more variable: Win_Percentage &lt;num:.2!&gt;\n\n\n\n\nClosing the connection to the database\n\n#had to add this because I nearly set my ram on fire\ndbDisconnect(conn = con)"
  }
]